{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NetplanConfig",
  "type": "object",
  "required": [
    "network"
  ],
  "properties": {
    "network": {
      "$ref": "#/definitions/NetworkConfig"
    }
  },
  "definitions": {
    "AccessPointConfig": {
      "type": "object",
      "properties": {
        "auth": {
          "anyOf": [
            {
              "$ref": "#/definitions/AuthConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "band": {
          "description": "Possible bands are 5GHz (for 5GHz 802.11a) and 2.4GHz (for 2.4GHz 802.11), do not restrict the 802.11 frequency band of the network if unset (the default).",
          "anyOf": [
            {
              "$ref": "#/definitions/WirelessBand"
            },
            {
              "type": "null"
            }
          ]
        },
        "bssid": {
          "description": "If specified, directs the device to only associate with the given access point.",
          "type": [
            "string",
            "null"
          ]
        },
        "channel": {
          "description": "Wireless channel to use for the Wi-Fi connection. Because channel numbers overlap between bands, this property takes effect only if the band property is also set.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "hidden": {
          "description": "Set to true to change the SSID scan technique for connecting to hidden WiFi networks. Note this may have slower performance compared to false (the default) when connecting to publicly broadcast SSIDs.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "mode": {
          "description": "Possible access point modes are infrastructure (the default), ap (create an access point to which other devices can connect), and adhoc (peer to peer networks without a central access point). ap is only supported with NetworkManager.",
          "anyOf": [
            {
              "$ref": "#/definitions/AccessPointMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "password": {
          "description": "Enable WPA2 authentication and set the passphrase for it. If neither this nor an auth block are given, the network is assumed to be open. The setting",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "AccessPointMode": {
      "description": "Possible access point modes are infrastructure (the default), ap (create an access point to which other devices can connect), and adhoc (peer to peer networks without a central access point). ap is only supported with NetworkManager.",
      "type": "string",
      "enum": [
        "infrastructure",
        "ap",
        "adhoc"
      ]
    },
    "AdSelect": {
      "description": "Set the aggregation selection mode. Possible values are stable, bandwidth, and count. This option is only used in 802.3ad mode.",
      "type": "string",
      "enum": [
        "stable",
        "bandwidth",
        "count"
      ]
    },
    "AddressMapping": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "label",
            "lifetime"
          ],
          "properties": {
            "label": {
              "description": "An IP address label, equivalent to the ip address label command. Currently supported on the networkd backend only.",
              "type": "string"
            },
            "lifetime": {
              "description": "Default: forever. This can be forever or 0 and corresponds to the PreferredLifetime option in systemd-networkd’s Address section. Currently supported on the networkd backend only.",
              "allOf": [
                {
                  "$ref": "#/definitions/PreferredLifetime"
                }
              ]
            }
          }
        }
      ]
    },
    "ArpAllTargets": {
      "description": "Specify whether to use any ARP IP target being up as sufficient for a slave to be considered up; or if all the targets must be up. This is only used for active-backup mode when arp-validate is enabled. Possible values are any and all.",
      "type": "string",
      "enum": [
        "any",
        "all"
      ]
    },
    "ArpValidate": {
      "description": "Configure how ARP replies are to be validated when using ARP link monitoring. Possible values are none, active, backup, and all.",
      "type": "string",
      "enum": [
        "none",
        "active",
        "backup",
        "all"
      ]
    },
    "AuthConfig": {
      "description": "Netplan supports advanced authentication settings for ethernet and wifi interfaces, as well as individual wifi networks, by means of the auth block.",
      "type": "object",
      "properties": {
        "anonymous-identity": {
          "description": "The identity to pass over the unencrypted channel if the chosen EAP method supports passing a different tunnelled identity.",
          "type": [
            "string",
            "null"
          ]
        },
        "ca-certificate": {
          "description": "Path to a file with one or more trusted certificate authority (CA) certificates.",
          "type": [
            "string",
            "null"
          ]
        },
        "client-certificate": {
          "description": "Path to a file containing the certificate to be used by the client during authentication.",
          "type": [
            "string",
            "null"
          ]
        },
        "client-key": {
          "description": "Path to a file containing the private key corresponding to client-certificate.",
          "type": [
            "string",
            "null"
          ]
        },
        "client-key-password": {
          "description": "Password to use to decrypt the private key specified in client-key if it is encrypted.",
          "type": [
            "string",
            "null"
          ]
        },
        "identity": {
          "description": "The identity to use for EAP.",
          "type": [
            "string",
            "null"
          ]
        },
        "key-management": {
          "description": "The supported key management modes are none (no key management); psk (WPA with pre-shared key, common for home wifi); eap (WPA with EAP, common for enterprise wifi); and 802.1x (used primarily for wired Ethernet connections).",
          "anyOf": [
            {
              "$ref": "#/definitions/KeyManagmentMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "method": {
          "description": "The EAP method to use. The supported EAP methods are tls (TLS), peap (Protected EAP), and ttls (Tunneled TLS).",
          "anyOf": [
            {
              "$ref": "#/definitions/AuthMethod"
            },
            {
              "type": "null"
            }
          ]
        },
        "password": {
          "description": "The password string for EAP, or the pre-shared key for WPA-PSK.",
          "type": [
            "string",
            "null"
          ]
        },
        "phase2-auth": {
          "description": "Phase 2 authentication mechanism.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "AuthMethod": {
      "type": "string",
      "enum": [
        "tls",
        "peap",
        "ttls"
      ]
    },
    "BondConfig": {
      "type": "object",
      "properties": {
        "accept-ra": {
          "description": "Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "activation-mode": {
          "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
          "anyOf": [
            {
              "$ref": "#/definitions/lowercase"
            },
            {
              "type": "null"
            }
          ]
        },
        "addresses": {
          "description": "Add static addresses to the interface in addition to the ones received through DHCP or RA. Each sequence entry is in CIDR notation, i. e. of the form addr/prefixlen. addr is an IPv4 or IPv6 address as recognized by inet_pton(3) and prefixlen the number of bits of the subnet.\n\nFor virtual devices (bridges, bonds, vlan) if there is no address configured and DHCP is disabled, the interface may still be brought online, but will not be addressable from the network.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AddressMapping"
          }
        },
        "critical": {
          "description": "Designate the connection as “critical to the system”, meaning that special care will be taken by to not release the assigned IP when the daemon is restarted. (not recognized by NetworkManager)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp-identifier": {
          "description": "(networkd backend only) Sets the source of DHCPv4 client identifier. If mac is specified, the MAC address of the link is used. If this option is omitted, or if duid is specified, networkd will generate an RFC4361-compliant client identifier for the interface by combining the link’s IAID and DUID.",
          "type": [
            "string",
            "null"
          ]
        },
        "dhcp4": {
          "description": "Enable DHCP for IPv4. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp4-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "dhcp6": {
          "description": "Enable DHCP for IPv6. Off by default. This covers both stateless DHCP - where the DHCP server supplies information like DNS nameservers but not the IP address - and stateful DHCP, where the server provides both the address and the other information.\n\nIf you are in an IPv6-only environment with completely stateless autoconfiguration (SLAAC with RDNSS), this option can be set to cause the interface to be brought up. (Setting accept-ra alone is not sufficient.) Autoconfiguration will still honour the contents of the router advertisement and only use DHCP if requested in the RA.\n\nNote that rdnssd(8) is required to use RDNSS with networkd. No extra software is required for NetworkManager.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp6-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "gateway4": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway6": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "ignore-carrier": {
          "description": "(networkd backend only) Allow the specified interface to be configured even if it has no carrier.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "interfaces": {
          "description": "All devices matching this ID list will be added to the bond.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "ipv6-address-generation": {
          "description": "Configure method for creating the address for use with RFC4862 IPv6 Stateless Address Autoconfiguration (only supported with NetworkManager backend). Possible values are eui64 or stable-privacy.",
          "anyOf": [
            {
              "$ref": "#/definitions/Ipv6AddressGeneration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ipv6-address-token": {
          "description": "Define an IPv6 address token for creating a static interface identifier for IPv6 Stateless Address Autoconfiguration. This is mutually exclusive with ipv6-address-generation.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6-mtu": {
          "description": "Set the IPv6 MTU (only supported with networkd backend). Note that needing to set this is an unusual requirement.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ipv6-privacy": {
          "description": "Enable IPv6 Privacy Extensions (RFC 4941) for the specified interface, and prefer temporary addresses. Defaults to false - no privacy extensions. There is currently no way to have a private address but prefer the public address.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "link-local": {
          "description": "Configure the link-local addresses to bring up. Valid options are ‘ipv4’ and ‘ipv6’, which respectively allow enabling IPv4 and IPv6 link local addressing. If this field is not defined, the default is to enable only IPv6 link-local addresses. If the field is defined but configured as an empty set, IPv6 link-local addresses are disabled as well as IPv4 link- local addresses.\n\nThis feature enables or disables link-local addresses for a protocol, but the actual implementation differs per backend. On networkd, this directly changes the behavior and may add an extra address on an interface. When using the NetworkManager backend, enabling link-local has no effect if the interface also has DHCP enabled.\n\nExample to enable only IPv4 link-local: `link-local: [ ipv4 ]` Example to enable all link-local addresses: `link-local: [ ipv4, ipv6 ]` Example to disable all link-local addresses: `link-local: [ ]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "macaddress": {
          "description": "Set the device’s MAC address. The MAC address must be in the form “XX:XX:XX:XX:XX:XX”.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MAC addresses.",
          "type": [
            "string",
            "null"
          ]
        },
        "mtu": {
          "description": "Set the Maximum Transmission Unit for the interface. The default is 1500. Valid values depend on your network interface.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MTU.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "nameservers": {
          "description": "Set DNS servers and search domains, for manual address configuration.",
          "anyOf": [
            {
              "$ref": "#/definitions/NameserverConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "An optional device is not required for booting. Normally, networkd will wait some time for device to become configured before proceeding with booting. However, if a device is marked as optional, networkd will not wait for it. This is only supported by networkd, and the default is false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optional-addresses": {
          "description": "Specify types of addresses that are not required for a device to be considered online. This changes the behavior of backends at boot time to avoid waiting for addresses that are marked optional, and thus consider the interface as “usable” sooner. This does not disable these addresses, which will be brought up anyway.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "parameters": {
          "description": "Customization parameters for special bonding options. Time intervals may need to be expressed as a number of seconds or milliseconds: the default value type is specified below. If necessary, time intervals can be qualified using a time suffix (such as “s” for seconds, “ms” for milliseconds) to allow for more control over its behavior.",
          "anyOf": [
            {
              "$ref": "#/definitions/BondParameters"
            },
            {
              "type": "null"
            }
          ]
        },
        "renderer": {
          "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "routes": {
          "description": "Configure static routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingConfig"
          }
        },
        "routing-policy": {
          "description": "Configure policy routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingPolicy"
          }
        }
      }
    },
    "BondMode": {
      "description": "Set the bonding mode used for the interfaces. The default is balance-rr (round robin). Possible values are balance-rr, active-backup, balance-xor, broadcast, 802.3ad, balance-tlb, and balance-alb. For OpenVSwitch active-backup and the additional modes balance-tcp and balance-slb are supported.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "balance-rr",
            "active-backup",
            "balance-xor",
            "broadcast",
            "balance-tlb",
            "balance-alb"
          ]
        },
        {
          "description": "802.3ad",
          "type": "string",
          "enum": [
            "802.3ad"
          ]
        }
      ]
    },
    "BondParameters": {
      "type": "object",
      "properties": {
        "ad-select": {
          "description": "Set the aggregation selection mode. Possible values are stable, bandwidth, and count. This option is only used in 802.3ad mode.",
          "anyOf": [
            {
              "$ref": "#/definitions/AdSelect"
            },
            {
              "type": "null"
            }
          ]
        },
        "all-slaves-active": {
          "description": "If the bond should drop duplicate frames received on inactive ports, set this option to false. If they should be delivered, set this option to true. The default value is false, and is the desirable behavior in most situations.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "arp-all-targets": {
          "description": "Specify whether to use any ARP IP target being up as sufficient for a slave to be considered up; or if all the targets must be up. This is only used for active-backup mode when arp-validate is enabled. Possible values are any and all.",
          "anyOf": [
            {
              "$ref": "#/definitions/ArpAllTargets"
            },
            {
              "type": "null"
            }
          ]
        },
        "arp-interval": {
          "description": "Set the interval value for how frequently ARP link monitoring should happen. The default value is 0, which disables ARP monitoring. For the networkd backend, this maps to the ARPIntervalSec= property. If no time suffix is specified, the value will be interpreted as milliseconds.",
          "type": [
            "string",
            "null"
          ]
        },
        "arp-ip-targets": {
          "description": "IPs of other hosts on the link which should be sent ARP requests in order to validate that a slave is up. This option is only used when arp-interval is set to a value other than 0. At least one IP address must be given for ARP link monitoring to function. Only IPv4 addresses are supported. You can specify up to 16 IP addresses. The default value is an empty list.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "arp-validate": {
          "description": "Configure how ARP replies are to be validated when using ARP link monitoring. Possible values are none, active, backup, and all.",
          "anyOf": [
            {
              "$ref": "#/definitions/ArpValidate"
            },
            {
              "type": "null"
            }
          ]
        },
        "down-delay": {
          "description": "Specify the delay before disabling a link once the link has been lost. The default value is 0. This maps to the DownDelaySec= property for the networkd renderer. This option is only valid for the miimon link monitor. If no time suffix is specified, the value will be interpreted as milliseconds.",
          "type": [
            "string",
            "null"
          ]
        },
        "fail-over-mac-policy": {
          "description": "Set whether to set all slaves to the same MAC address when adding them to the bond, or how else the system should handle MAC addresses. The possible values are none, active, and follow.",
          "anyOf": [
            {
              "$ref": "#/definitions/FailOverMacPolicy"
            },
            {
              "type": "null"
            }
          ]
        },
        "gratuitous-arp": {
          "description": "Specify how many ARP packets to send after failover. Once a link is up on a new slave, a notification is sent and possibly repeated if this value is set to a number greater than 1. The default value is 1 and valid values are between 1 and 255. This only affects active-backup mode.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        },
        "lacp-rate": {
          "description": "Set the rate at which LACPDUs are transmitted. This is only useful in 802.3ad mode. Possible values are slow (30 seconds, default), and fast (every second).",
          "anyOf": [
            {
              "$ref": "#/definitions/LacpRate"
            },
            {
              "type": "null"
            }
          ]
        },
        "learn-packet-interval": {
          "description": "Specify the interval between sending learning packets to each slave. The value range is between 1 and 0x7fffffff. The default value is 1. This option only affects balance-tlb and balance-alb modes. Using the networkd renderer, this field maps to the LearnPacketIntervalSec= property. If no time suffix is specified, the value will be interpreted as seconds.",
          "type": [
            "string",
            "null"
          ]
        },
        "mii-monitor-interval": {
          "description": "Specifies the interval for MII monitoring (verifying if an interface of the bond has carrier). The default is 0; which disables MII monitoring. This is equivalent to the MIIMonitorSec= field for the networkd backend. If no time suffix is specified, the value will be interpreted as milliseconds.",
          "type": [
            "string",
            "null"
          ]
        },
        "min-links": {
          "description": "The minimum number of links up in a bond to consider the bond interface to be up.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "mode": {
          "description": "Set the bonding mode used for the interfaces. The default is balance-rr (round robin). Possible values are balance-rr, active-backup, balance-xor, broadcast, 802.3ad, balance-tlb, and balance-alb. For OpenVSwitch active-backup and the additional modes balance-tcp and balance-slb are supported. #[serde(skip_serializing_if = \"Option",
          "anyOf": [
            {
              "$ref": "#/definitions/BondMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "packets-per-slave": {
          "description": "In balance-rr mode, specifies the number of packets to transmit on a slave before switching to the next. When this value is set to 0, slaves are chosen at random. Allowable values are between 0 and 65535. The default value is 1. This setting is only used in balance-rr mode.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "primary": {
          "description": "Specify a device to be used as a primary slave, or preferred device to use as a slave for the bond (ie. the preferred device to send data through), whenever it is available. This only affects active-backup, balance-alb, and balance-tlb modes.",
          "type": [
            "string",
            "null"
          ]
        },
        "primary-reselect-policy": {
          "description": "Set the reselection policy for the primary slave. On failure of the active slave, the system will use this policy to decide how the new active slave will be chosen and how recovery will be handled. The possible values are always, better, and failure.",
          "anyOf": [
            {
              "$ref": "#/definitions/PrimaryReselectPolicy"
            },
            {
              "type": "null"
            }
          ]
        },
        "resend-igmp": {
          "description": "In modes balance-rr, active-backup, balance-tlb and balance-alb, a failover can switch IGMP traffic from one slave to another.\n\nThis parameter specifies how many IGMP membership reports are issued on a failover event. Values range from 0 to 255. 0 disables sending membership reports. Otherwise, the first membership report is sent on failover and subsequent reports are sent at 200ms intervals.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        },
        "transmit-hash-policy": {
          "description": "Specifies the transmit hash policy for the selection of slaves. This is only useful in balance-xor, 802.3ad and balance-tlb modes. Possible values are layer2, layer3+4, layer2+3, encap2+3, and encap3+4.",
          "anyOf": [
            {
              "$ref": "#/definitions/TransmitHashPolicy"
            },
            {
              "type": "null"
            }
          ]
        },
        "up-delay": {
          "description": "Specify the delay before enabling a link once the link is physically up. The default value is 0. This maps to the UpDelaySec= property for the networkd renderer. This option is only valid for the miimon link monitor. If no time suffix is specified, the value will be interpreted as milliseconds.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "BridgeConfig": {
      "type": "object",
      "properties": {
        "accept-ra": {
          "description": "Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "activation-mode": {
          "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
          "anyOf": [
            {
              "$ref": "#/definitions/lowercase"
            },
            {
              "type": "null"
            }
          ]
        },
        "addresses": {
          "description": "Add static addresses to the interface in addition to the ones received through DHCP or RA. Each sequence entry is in CIDR notation, i. e. of the form addr/prefixlen. addr is an IPv4 or IPv6 address as recognized by inet_pton(3) and prefixlen the number of bits of the subnet.\n\nFor virtual devices (bridges, bonds, vlan) if there is no address configured and DHCP is disabled, the interface may still be brought online, but will not be addressable from the network.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AddressMapping"
          }
        },
        "critical": {
          "description": "Designate the connection as “critical to the system”, meaning that special care will be taken by to not release the assigned IP when the daemon is restarted. (not recognized by NetworkManager)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp-identifier": {
          "description": "(networkd backend only) Sets the source of DHCPv4 client identifier. If mac is specified, the MAC address of the link is used. If this option is omitted, or if duid is specified, networkd will generate an RFC4361-compliant client identifier for the interface by combining the link’s IAID and DUID.",
          "type": [
            "string",
            "null"
          ]
        },
        "dhcp4": {
          "description": "Enable DHCP for IPv4. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp4-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "dhcp6": {
          "description": "Enable DHCP for IPv6. Off by default. This covers both stateless DHCP - where the DHCP server supplies information like DNS nameservers but not the IP address - and stateful DHCP, where the server provides both the address and the other information.\n\nIf you are in an IPv6-only environment with completely stateless autoconfiguration (SLAAC with RDNSS), this option can be set to cause the interface to be brought up. (Setting accept-ra alone is not sufficient.) Autoconfiguration will still honour the contents of the router advertisement and only use DHCP if requested in the RA.\n\nNote that rdnssd(8) is required to use RDNSS with networkd. No extra software is required for NetworkManager.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp6-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "gateway4": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway6": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "ignore-carrier": {
          "description": "(networkd backend only) Allow the specified interface to be configured even if it has no carrier.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "interfaces": {
          "description": "All devices matching this ID list will be added to the bridge. This may be an empty list, in which case the bridge will be brought online with no member interfaces.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "ipv6-address-generation": {
          "description": "Configure method for creating the address for use with RFC4862 IPv6 Stateless Address Autoconfiguration (only supported with NetworkManager backend). Possible values are eui64 or stable-privacy.",
          "anyOf": [
            {
              "$ref": "#/definitions/Ipv6AddressGeneration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ipv6-address-token": {
          "description": "Define an IPv6 address token for creating a static interface identifier for IPv6 Stateless Address Autoconfiguration. This is mutually exclusive with ipv6-address-generation.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6-mtu": {
          "description": "Set the IPv6 MTU (only supported with networkd backend). Note that needing to set this is an unusual requirement.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ipv6-privacy": {
          "description": "Enable IPv6 Privacy Extensions (RFC 4941) for the specified interface, and prefer temporary addresses. Defaults to false - no privacy extensions. There is currently no way to have a private address but prefer the public address.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "link-local": {
          "description": "Configure the link-local addresses to bring up. Valid options are ‘ipv4’ and ‘ipv6’, which respectively allow enabling IPv4 and IPv6 link local addressing. If this field is not defined, the default is to enable only IPv6 link-local addresses. If the field is defined but configured as an empty set, IPv6 link-local addresses are disabled as well as IPv4 link- local addresses.\n\nThis feature enables or disables link-local addresses for a protocol, but the actual implementation differs per backend. On networkd, this directly changes the behavior and may add an extra address on an interface. When using the NetworkManager backend, enabling link-local has no effect if the interface also has DHCP enabled.\n\nExample to enable only IPv4 link-local: `link-local: [ ipv4 ]` Example to enable all link-local addresses: `link-local: [ ipv4, ipv6 ]` Example to disable all link-local addresses: `link-local: [ ]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "macaddress": {
          "description": "Set the device’s MAC address. The MAC address must be in the form “XX:XX:XX:XX:XX:XX”.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MAC addresses.",
          "type": [
            "string",
            "null"
          ]
        },
        "mtu": {
          "description": "Set the Maximum Transmission Unit for the interface. The default is 1500. Valid values depend on your network interface.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MTU.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "nameservers": {
          "description": "Set DNS servers and search domains, for manual address configuration.",
          "anyOf": [
            {
              "$ref": "#/definitions/NameserverConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "An optional device is not required for booting. Normally, networkd will wait some time for device to become configured before proceeding with booting. However, if a device is marked as optional, networkd will not wait for it. This is only supported by networkd, and the default is false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optional-addresses": {
          "description": "Specify types of addresses that are not required for a device to be considered online. This changes the behavior of backends at boot time to avoid waiting for addresses that are marked optional, and thus consider the interface as “usable” sooner. This does not disable these addresses, which will be brought up anyway.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "parameters": {
          "description": "Customization parameters for special bridging options. Time intervals may need to be expressed as a number of seconds or milliseconds: the default value type is specified below. If necessary, time intervals can be qualified using a time suffix (such as “s” for seconds, “ms” for milliseconds) to allow for more control over its behavior.",
          "anyOf": [
            {
              "$ref": "#/definitions/BridgeParameters"
            },
            {
              "type": "null"
            }
          ]
        },
        "renderer": {
          "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "routes": {
          "description": "Configure static routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingConfig"
          }
        },
        "routing-policy": {
          "description": "Configure policy routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingPolicy"
          }
        }
      }
    },
    "BridgeParameters": {
      "description": "Customization parameters for special bridging options. Time intervals may need to be expressed as a number of seconds or milliseconds: the default value type is specified below. If necessary, time intervals can be qualified using a time suffix (such as “s” for seconds, “ms” for milliseconds) to allow for more control over its behavior.",
      "type": "object",
      "properties": {
        "ageing-time": {
          "description": "Set the period of time to keep a MAC address in the forwarding database after a packet is received. This maps to the AgeingTimeSec= property when the networkd renderer is used. If no time suffix is specified, the value will be interpreted as seconds.",
          "type": [
            "string",
            "null"
          ]
        },
        "forward-delay": {
          "description": "Specify the period of time the bridge will remain in Listening and Learning states before getting to the Forwarding state. This field maps to the ForwardDelaySec= property for the networkd renderer. If no time suffix is specified, the value will be interpreted as seconds.",
          "type": [
            "string",
            "null"
          ]
        },
        "hello-time": {
          "description": "Specify the interval between two hello packets being sent out from the root and designated bridges. Hello packets communicate information about the network topology. When the networkd renderer is used, this maps to the HelloTimeSec= property. If no time suffix is specified, the value will be interpreted as seconds.",
          "type": [
            "string",
            "null"
          ]
        },
        "max-age": {
          "description": "Set the maximum age of a hello packet. If the last hello packet is older than that value, the bridge will attempt to become the root bridge. This maps to the MaxAgeSec= property when the networkd renderer is used. If no time suffix is specified, the value will be interpreted as seconds.",
          "type": [
            "string",
            "null"
          ]
        },
        "path-cost": {
          "description": "Set the cost of a path on the bridge. Faster interfaces should have a lower cost. This allows a finer control on the network topology so that the fastest paths are available whenever possible.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "port-priority": {
          "description": "Set the port priority to . The priority value is a number between 0 and 63. This metric is used in the designated port and root port selection algorithms.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        },
        "priority": {
          "description": "Set the priority value for the bridge. This value should be a number between 0 and 65535. Lower values mean higher priority. The bridge with the higher priority will be elected as the root bridge.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "stp": {
          "description": "Define whether the bridge should use Spanning Tree Protocol. The default value is “true”, which means that Spanning Tree should be used.",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "ConnectionMode": {
      "type": "string",
      "enum": [
        "in-band",
        "out-of-band"
      ]
    },
    "ControllerConfig": {
      "description": "Valid for bridge interfaces. Specify an external OpenFlow controller.",
      "type": "object",
      "properties": {
        "addresses": {
          "description": "Set the list of addresses to use for the controller targets. The syntax of these addresses is as defined in ovs-vsctl(8). Example: addresses: [tcp:127.0.0.1:6653, \"ssl:[fe80::1234%eth0]:6653\"]",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "connection-mode": {
          "description": "Set the connection mode for the controller. Supported options are in-band and out-of-band. The default is in-band.",
          "anyOf": [
            {
              "$ref": "#/definitions/ConnectionMode"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "DhcpOverrides": {
      "description": "Several DHCP behavior overrides are available. Most currently only have any effect when using the networkd backend, with the exception of use-routes and route-metric.\n\nOverrides only have an effect if the corresponding dhcp4 or dhcp6 is set to true.\n\nIf both dhcp4 and dhcp6 are true, the networkd backend requires that dhcp4-overrides and dhcp6-overrides contain the same keys and values. If the values do not match, an error will be shown and the network configuration will not be applied.\n\nWhen using the NetworkManager backend, different values may be specified for dhcp4-overrides and dhcp6-overrides, and will be applied to the DHCP client processes as specified in the netplan YAML.",
      "type": "object",
      "properties": {
        "hostname": {
          "description": "Use this value for the hostname which is sent to the DHCP server, instead of machine’s hostname. Currently only has an effect on the networkd backend.",
          "type": [
            "string",
            "null"
          ]
        },
        "route-metric": {
          "description": "Use this value for default metric for automatically-added routes. Use this to prioritize routes for devices by setting a lower metric on a preferred interface. Available for both the networkd and NetworkManager backends.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "send-hostname": {
          "description": "Default: true. When true, the machine’s hostname will be sent to the DHCP server. Currently only has an effect on the networkd backend.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "use-dns": {
          "description": "Default: true. When true, the DNS servers received from the DHCP server will be used and take precedence over any statically configured ones. Currently only has an effect on the networkd backend.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "use-domains": {
          "description": "Takes a boolean, or the special value “route”. When true, the domain name received from the DHCP server will be used as DNS search domain over this link, similar to the effect of the Domains= setting. If set to “route”, the domain name received from the DHCP server will be used for routing DNS queries only, but not for searching, similar to the effect of the Domains= setting when the argument is prefixed with “~”.",
          "type": [
            "string",
            "null"
          ]
        },
        "use-hostname": {
          "description": "Default: true. When true, the hostname received from the DHCP server will be set as the transient hostname of the system. Currently only has an effect on the networkd backend.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "use-mtu": {
          "description": "Default: true. When true, the MTU received from the DHCP server will be set as the MTU of the network interface. When false, the MTU advertised by the DHCP server will be ignored. Currently only has an effect on the networkd backend.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "use-ntp": {
          "description": "Default: true. When true, the NTP servers received from the DHCP server will be used by systemd-timesyncd and take precedence over any statically configured ones. Currently only has an effect on the networkd backend.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "use-routes": {
          "description": "Default: true. When true, the routes received from the DHCP server will be installed in the routing table normally. When set to false, routes from the DHCP server will be ignored: in this case, the user is responsible for adding static routes if necessary for correct network operation. This allows users to avoid installing a default gateway for interfaces configured via DHCP. Available for both the networkd and NetworkManager backends.",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "DummyDeviceConfig": {
      "description": "Purpose: Use the dummy-devices key to create virtual interfaces.\n\nStructure: The key consists of a mapping of interface names. Dummy devices are virtual devices that can be used to route packets to without actually transmitting them.",
      "type": "object",
      "properties": {
        "accept-ra": {
          "description": "Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "activation-mode": {
          "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
          "anyOf": [
            {
              "$ref": "#/definitions/lowercase"
            },
            {
              "type": "null"
            }
          ]
        },
        "addresses": {
          "description": "Add static addresses to the interface in addition to the ones received through DHCP or RA. Each sequence entry is in CIDR notation, i. e. of the form addr/prefixlen. addr is an IPv4 or IPv6 address as recognized by inet_pton(3) and prefixlen the number of bits of the subnet.\n\nFor virtual devices (bridges, bonds, vlan) if there is no address configured and DHCP is disabled, the interface may still be brought online, but will not be addressable from the network.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AddressMapping"
          }
        },
        "critical": {
          "description": "Designate the connection as “critical to the system”, meaning that special care will be taken by to not release the assigned IP when the daemon is restarted. (not recognized by NetworkManager)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp-identifier": {
          "description": "(networkd backend only) Sets the source of DHCPv4 client identifier. If mac is specified, the MAC address of the link is used. If this option is omitted, or if duid is specified, networkd will generate an RFC4361-compliant client identifier for the interface by combining the link’s IAID and DUID.",
          "type": [
            "string",
            "null"
          ]
        },
        "dhcp4": {
          "description": "Enable DHCP for IPv4. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp4-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "dhcp6": {
          "description": "Enable DHCP for IPv6. Off by default. This covers both stateless DHCP - where the DHCP server supplies information like DNS nameservers but not the IP address - and stateful DHCP, where the server provides both the address and the other information.\n\nIf you are in an IPv6-only environment with completely stateless autoconfiguration (SLAAC with RDNSS), this option can be set to cause the interface to be brought up. (Setting accept-ra alone is not sufficient.) Autoconfiguration will still honour the contents of the router advertisement and only use DHCP if requested in the RA.\n\nNote that rdnssd(8) is required to use RDNSS with networkd. No extra software is required for NetworkManager.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp6-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "gateway4": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway6": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "ignore-carrier": {
          "description": "(networkd backend only) Allow the specified interface to be configured even if it has no carrier.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ipv6-address-generation": {
          "description": "Configure method for creating the address for use with RFC4862 IPv6 Stateless Address Autoconfiguration (only supported with NetworkManager backend). Possible values are eui64 or stable-privacy.",
          "anyOf": [
            {
              "$ref": "#/definitions/Ipv6AddressGeneration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ipv6-address-token": {
          "description": "Define an IPv6 address token for creating a static interface identifier for IPv6 Stateless Address Autoconfiguration. This is mutually exclusive with ipv6-address-generation.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6-mtu": {
          "description": "Set the IPv6 MTU (only supported with networkd backend). Note that needing to set this is an unusual requirement.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ipv6-privacy": {
          "description": "Enable IPv6 Privacy Extensions (RFC 4941) for the specified interface, and prefer temporary addresses. Defaults to false - no privacy extensions. There is currently no way to have a private address but prefer the public address.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "link-local": {
          "description": "Configure the link-local addresses to bring up. Valid options are ‘ipv4’ and ‘ipv6’, which respectively allow enabling IPv4 and IPv6 link local addressing. If this field is not defined, the default is to enable only IPv6 link-local addresses. If the field is defined but configured as an empty set, IPv6 link-local addresses are disabled as well as IPv4 link- local addresses.\n\nThis feature enables or disables link-local addresses for a protocol, but the actual implementation differs per backend. On networkd, this directly changes the behavior and may add an extra address on an interface. When using the NetworkManager backend, enabling link-local has no effect if the interface also has DHCP enabled.\n\nExample to enable only IPv4 link-local: `link-local: [ ipv4 ]` Example to enable all link-local addresses: `link-local: [ ipv4, ipv6 ]` Example to disable all link-local addresses: `link-local: [ ]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "macaddress": {
          "description": "Set the device’s MAC address. The MAC address must be in the form “XX:XX:XX:XX:XX:XX”.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MAC addresses.",
          "type": [
            "string",
            "null"
          ]
        },
        "mtu": {
          "description": "Set the Maximum Transmission Unit for the interface. The default is 1500. Valid values depend on your network interface.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MTU.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "nameservers": {
          "description": "Set DNS servers and search domains, for manual address configuration.",
          "anyOf": [
            {
              "$ref": "#/definitions/NameserverConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "An optional device is not required for booting. Normally, networkd will wait some time for device to become configured before proceeding with booting. However, if a device is marked as optional, networkd will not wait for it. This is only supported by networkd, and the default is false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optional-addresses": {
          "description": "Specify types of addresses that are not required for a device to be considered online. This changes the behavior of backends at boot time to avoid waiting for addresses that are marked optional, and thus consider the interface as “usable” sooner. This does not disable these addresses, which will be brought up anyway.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "renderer": {
          "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "routes": {
          "description": "Configure static routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingConfig"
          }
        },
        "routing-policy": {
          "description": "Configure policy routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingPolicy"
          }
        }
      }
    },
    "EmbeddedSwitchMode": {
      "type": "string",
      "enum": [
        "switchdev",
        "legacy"
      ]
    },
    "EthernetConfig": {
      "description": "Common properties for physical device types",
      "type": "object",
      "properties": {
        "accept-ra": {
          "description": "Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "activation-mode": {
          "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
          "anyOf": [
            {
              "$ref": "#/definitions/lowercase"
            },
            {
              "type": "null"
            }
          ]
        },
        "addresses": {
          "description": "Add static addresses to the interface in addition to the ones received through DHCP or RA. Each sequence entry is in CIDR notation, i. e. of the form addr/prefixlen. addr is an IPv4 or IPv6 address as recognized by inet_pton(3) and prefixlen the number of bits of the subnet.\n\nFor virtual devices (bridges, bonds, vlan) if there is no address configured and DHCP is disabled, the interface may still be brought online, but will not be addressable from the network.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AddressMapping"
          }
        },
        "critical": {
          "description": "Designate the connection as “critical to the system”, meaning that special care will be taken by to not release the assigned IP when the daemon is restarted. (not recognized by NetworkManager)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "delay-virtual-functions-rebind": {
          "description": "(SR-IOV devices only) Delay rebinding of SR-IOV virtual functions to its driver after changing the embedded-switch-mode setting to a later stage. Can be enabled when bonding/VF LAG is in use. Defaults to false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp-identifier": {
          "description": "(networkd backend only) Sets the source of DHCPv4 client identifier. If mac is specified, the MAC address of the link is used. If this option is omitted, or if duid is specified, networkd will generate an RFC4361-compliant client identifier for the interface by combining the link’s IAID and DUID.",
          "type": [
            "string",
            "null"
          ]
        },
        "dhcp4": {
          "description": "Enable DHCP for IPv4. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp4-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "dhcp6": {
          "description": "Enable DHCP for IPv6. Off by default. This covers both stateless DHCP - where the DHCP server supplies information like DNS nameservers but not the IP address - and stateful DHCP, where the server provides both the address and the other information.\n\nIf you are in an IPv6-only environment with completely stateless autoconfiguration (SLAAC with RDNSS), this option can be set to cause the interface to be brought up. (Setting accept-ra alone is not sufficient.) Autoconfiguration will still honour the contents of the router advertisement and only use DHCP if requested in the RA.\n\nNote that rdnssd(8) is required to use RDNSS with networkd. No extra software is required for NetworkManager.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp6-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "embedded-switch-mode": {
          "description": "(SR-IOV devices only) Change the operational mode of the embedded switch of a supported SmartNIC PCI device (e.g. Mellanox ConnectX-5). Possible values are switchdev or legacy, if unspecified the vendor’s default configuration is used.",
          "anyOf": [
            {
              "$ref": "#/definitions/EmbeddedSwitchMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "emit-lldp": {
          "description": "(networkd backend only) Whether to emit LLDP packets. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "gateway4": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway6": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "generic-receive-offload": {
          "description": "(networkd backend only) If set to true, the Generic Receive Offload (GRO) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "generic-segmentation-offload": {
          "description": "(networkd backend only) If set to true, the Generic Segmentation Offload (GSO) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignore-carrier": {
          "description": "(networkd backend only) Allow the specified interface to be configured even if it has no carrier.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ipv6-address-generation": {
          "description": "Configure method for creating the address for use with RFC4862 IPv6 Stateless Address Autoconfiguration (only supported with NetworkManager backend). Possible values are eui64 or stable-privacy.",
          "anyOf": [
            {
              "$ref": "#/definitions/Ipv6AddressGeneration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ipv6-address-token": {
          "description": "Define an IPv6 address token for creating a static interface identifier for IPv6 Stateless Address Autoconfiguration. This is mutually exclusive with ipv6-address-generation.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6-mtu": {
          "description": "Set the IPv6 MTU (only supported with networkd backend). Note that needing to set this is an unusual requirement.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ipv6-privacy": {
          "description": "Enable IPv6 Privacy Extensions (RFC 4941) for the specified interface, and prefer temporary addresses. Defaults to false - no privacy extensions. There is currently no way to have a private address but prefer the public address.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "large-receive-offload": {
          "description": "(networkd backend only) If set to true, the Generic Receive Offload (GRO) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "link": {
          "description": "(SR-IOV devices only) The link property declares the device as a Virtual Function of the selected Physical Function device, as identified by the given netplan id.",
          "type": [
            "string",
            "null"
          ]
        },
        "link-local": {
          "description": "Configure the link-local addresses to bring up. Valid options are ‘ipv4’ and ‘ipv6’, which respectively allow enabling IPv4 and IPv6 link local addressing. If this field is not defined, the default is to enable only IPv6 link-local addresses. If the field is defined but configured as an empty set, IPv6 link-local addresses are disabled as well as IPv4 link- local addresses.\n\nThis feature enables or disables link-local addresses for a protocol, but the actual implementation differs per backend. On networkd, this directly changes the behavior and may add an extra address on an interface. When using the NetworkManager backend, enabling link-local has no effect if the interface also has DHCP enabled.\n\nExample to enable only IPv4 link-local: `link-local: [ ipv4 ]` Example to enable all link-local addresses: `link-local: [ ipv4, ipv6 ]` Example to disable all link-local addresses: `link-local: [ ]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "macaddress": {
          "description": "Set the device’s MAC address. The MAC address must be in the form “XX:XX:XX:XX:XX:XX”.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MAC addresses.",
          "type": [
            "string",
            "null"
          ]
        },
        "match": {
          "description": "This selects a subset of available physical devices by various hardware properties. The following configuration will then apply to all matching devices, as soon as they appear. All specified properties must match.",
          "anyOf": [
            {
              "$ref": "#/definitions/MatchConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "mtu": {
          "description": "Set the Maximum Transmission Unit for the interface. The default is 1500. Valid values depend on your network interface.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MTU.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "nameservers": {
          "description": "Set DNS servers and search domains, for manual address configuration.",
          "anyOf": [
            {
              "$ref": "#/definitions/NameserverConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "openvswitch": {
          "description": "This provides additional configuration for the network device for openvswitch. If openvswitch is not available on the system, netplan treats the presence of openvswitch configuration as an error.\n\nAny supported network device that is declared with the openvswitch mapping (or any bond/bridge that includes an interface with an openvswitch configuration) will be created in openvswitch instead of the defined renderer. In the case of a vlan definition declared the same way, netplan will create a fake VLAN bridge in openvswitch with the requested vlan properties.",
          "anyOf": [
            {
              "$ref": "#/definitions/OpenVSwitchConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "An optional device is not required for booting. Normally, networkd will wait some time for device to become configured before proceeding with booting. However, if a device is marked as optional, networkd will not wait for it. This is only supported by networkd, and the default is false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optional-addresses": {
          "description": "Specify types of addresses that are not required for a device to be considered online. This changes the behavior of backends at boot time to avoid waiting for addresses that are marked optional, and thus consider the interface as “usable” sooner. This does not disable these addresses, which will be brought up anyway.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "receive-checksum-offload": {
          "description": "(networkd backend only) If set to true, the hardware offload for checksumming of ingress network packets is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "renderer": {
          "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "routes": {
          "description": "Configure static routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingConfig"
          }
        },
        "routing-policy": {
          "description": "Configure policy routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingPolicy"
          }
        },
        "set-name": {
          "description": "When matching on unique properties such as path or MAC, or with additional assumptions such as “there will only ever be one wifi device”, match rules can be written so that they only match one device. Then this property can be used to give that device a more specific/desirable/nicer name than the default from udev’s ifnames. Any additional device that satisfies the match rules will then fail to get renamed and keep the original kernel name (and dmesg will show an error).",
          "type": [
            "string",
            "null"
          ]
        },
        "tcp-segmentation-offload": {
          "description": "(networkd backend only) If set to true, the TCP Segmentation Offload (TSO) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "tcp6-segmentation-offload": {
          "description": "(networkd backend only) If set to true, the TCP6 Segmentation Offload (tx-tcp6-segmentation) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "transmit-checksum-offload": {
          "description": "(networkd backend only) If set to true, the hardware offload for checksumming of egress network packets is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "virtual-function-count": {
          "description": "(SR-IOV devices only) In certain special cases VFs might need to be configured outside of netplan. For such configurations virtual-function-count can be optionally used to set an explicit number of Virtual Functions for the given Physical Function. If unset, the default is to create only as many VFs as are defined in the netplan configuration. This should be used for special cases only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "wakeonlan": {
          "description": "Enable wake on LAN. Off by default.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting wake on LAN.",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "FailMode": {
      "type": "string",
      "enum": [
        "Secure",
        "Standalone"
      ]
    },
    "FailOverMacPolicy": {
      "description": "Set whether to set all slaves to the same MAC address when adding them to the bond, or how else the system should handle MAC addresses. The possible values are none, active, and follow.",
      "type": "string",
      "enum": [
        "none",
        "activv",
        "follow"
      ]
    },
    "Ipv6AddressGeneration": {
      "type": "string",
      "enum": [
        "eui64",
        "stable-privacy"
      ]
    },
    "KeyManagmentMode": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none",
            "psk",
            "eap",
            "sae"
          ]
        },
        {
          "description": "802.1x",
          "type": "string",
          "enum": [
            "802.1x"
          ]
        }
      ]
    },
    "Lacp": {
      "type": "string",
      "enum": [
        "Active",
        "Passive",
        "Off"
      ]
    },
    "LacpRate": {
      "description": "Set the rate at which LACPDUs are transmitted. This is only useful in 802.3ad mode. Possible values are slow (30 seconds, default), and fast (every second).",
      "type": "string",
      "enum": [
        "slow",
        "fast"
      ]
    },
    "MatchConfig": {
      "description": "This selects a subset of available physical devices by various hardware properties. The following configuration will then apply to all matching devices, as soon as they appear. All specified properties must match.",
      "type": "object",
      "properties": {
        "driver": {
          "description": "Kernel driver name, corresponding to the DRIVER udev property. A sequence of globs is supported, any of which must match. Matching on driver is only supported with networkd.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "macaddress": {
          "description": "Device’s MAC address in the form “XX:XX:XX:XX:XX:XX”. Globs are not allowed.",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "Current interface name. Globs are supported, and the primary use case for matching on names, as selecting one fixed name can be more easily achieved with having no match: at all and just using the ID (see above). (NetworkManager: as of v1.14.0)",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NameserverConfig": {
      "description": "Set DNS servers and search domains, for manual address configuration.",
      "type": "object",
      "properties": {
        "addresses": {
          "description": "A list of IPv4 or IPv6 addresses",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "search": {
          "description": "A list of search domains.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NetworkConfig": {
      "type": "object",
      "required": [
        "version"
      ],
      "properties": {
        "bonds": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/BondConfig"
          }
        },
        "bridges": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/BridgeConfig"
          }
        },
        "dummy-devices": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/DummyDeviceConfig"
          }
        },
        "ethernets": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/EthernetConfig"
          }
        },
        "renderer": {
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "tunnels": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/TunnelConfig"
          }
        },
        "version": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "vlans": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/VlanConfig"
          }
        },
        "vrfs": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/VrfsConfig"
          }
        },
        "wifis": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/WifiConfig"
          }
        }
      }
    },
    "OpenFlowProtocol": {
      "type": "string",
      "enum": [
        "OpenFlow10",
        "OpenFlow11",
        "OpenFlow12",
        "OpenFlow13",
        "OpenFlow14",
        "OpenFlow15",
        "OpenFlow16"
      ]
    },
    "OpenVSwitchConfig": {
      "description": "This provides additional configuration for the network device for openvswitch. If openvswitch is not available on the system, netplan treats the presence of openvswitch configuration as an error.\n\nAny supported network device that is declared with the openvswitch mapping (or any bond/bridge that includes an interface with an openvswitch configuration) will be created in openvswitch instead of the defined renderer. In the case of a vlan definition declared the same way, netplan will create a fake VLAN bridge in openvswitch with the requested vlan properties.",
      "type": "object",
      "properties": {
        "controller": {
          "description": "Valid for bridge interfaces. Specify an external OpenFlow controller.",
          "anyOf": [
            {
              "$ref": "#/definitions/ControllerConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "external-ids": {
          "description": "Passed-through directly to OpenVSwitch",
          "type": [
            "string",
            "null"
          ]
        },
        "fail-mode": {
          "description": "Valid for bridge interfaces. Accepts secure or standalone (the default).",
          "anyOf": [
            {
              "$ref": "#/definitions/FailMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "lacp": {
          "description": "Valid for bond interfaces. Accepts active, passive or off (the default).",
          "anyOf": [
            {
              "$ref": "#/definitions/Lacp"
            },
            {
              "type": "null"
            }
          ]
        },
        "mcast-snooping": {
          "description": "Valid for bridge interfaces. False by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "other-config": {
          "description": "Passed-through directly to OpenVSwitch",
          "type": [
            "string",
            "null"
          ]
        },
        "ports": {
          "description": "OpenvSwitch patch ports. Each port is declared as a pair of names which can be referenced as interfaces in dependent virtual devices (bonds, bridges).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "protocols": {
          "description": "Valid for bridge interfaces or the network section. List of protocols to be used when negotiating a connection with the controller. Accepts OpenFlow10, OpenFlow11, OpenFlow12, OpenFlow13, OpenFlow14, OpenFlow15 and OpenFlow16.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/OpenFlowProtocol"
          }
        },
        "rtsp": {
          "description": "Valid for bridge interfaces. False by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ssl": {
          "description": "Valid for global openvswitch settings. Options for configuring SSL server endpoint for the switch.",
          "anyOf": [
            {
              "$ref": "#/definitions/SslConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "PreferredLifetime": {
      "type": "string",
      "enum": [
        "forever",
        "0"
      ]
    },
    "PrimaryReselectPolicy": {
      "description": "Set the reselection policy for the primary slave. On failure of the active slave, the system will use this policy to decide how the new active slave will be chosen and how recovery will be handled. The possible values are always, better, and failure.",
      "type": "string",
      "enum": [
        "always",
        "better",
        "failure"
      ]
    },
    "Renderer": {
      "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
      "type": "string",
      "enum": [
        "networkd",
        "NetworkManager",
        "sriov"
      ]
    },
    "RouteScope": {
      "description": "The route scope, how wide-ranging it is to the network. Possible values are “global”, “link”, or “host”.",
      "type": "string",
      "enum": [
        "global",
        "link",
        "host"
      ]
    },
    "RouteType": {
      "description": "The type of route. Valid options are “unicast” (default), “anycast”, “blackhole”, “broadcast”, “local”, “multicast”, “nat”, “prohibit”, “throw”, “unreachable” or “xresolve”.",
      "type": "string",
      "enum": [
        "unicast",
        "anycast",
        "blackhole",
        "broadcast",
        "local",
        "multicast",
        "nat",
        "prohibit",
        "throw",
        "unreachable",
        "xresolve"
      ]
    },
    "RoutingConfig": {
      "description": "The routes block defines standard static routes for an interface. At least to must be specified. If type is local or nat a default scope of host is assumed. If type is unicast and no gateway (via) is given or type is broadcast, multicast or anycast a default scope of link is assumend. Otherwise, a global scope is the default setting.\n\nFor from, to, and via, both IPv4 and IPv6 addresses are recognized, and must be in the form addr/prefixlen or addr.",
      "type": "object",
      "properties": {
        "advertised-receive-window": {
          "description": "The receive window to be advertised for the route, represented by number of segments. Must be a positive integer value.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "congestion-window": {
          "description": "The congestion window to be used for the route, represented by number of segments. Must be a positive integer value.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "from": {
          "description": "Set a source IP address for traffic going through the route. (NetworkManager: as of v1.8.0)",
          "type": [
            "string",
            "null"
          ]
        },
        "metric": {
          "description": "The relative priority of the route. Must be a positive integer value.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "mtu": {
          "description": "The MTU to be used for the route, in bytes. Must be a positive integer value.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "on-link": {
          "description": "When set to “true”, specifies that the route is directly connected to the interface. (NetworkManager: as of v1.12.0 for IPv4 and v1.18.0 for IPv6)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "scope": {
          "description": "The route scope, how wide-ranging it is to the network. Possible values are “global”, “link”, or “host”.",
          "anyOf": [
            {
              "$ref": "#/definitions/RouteScope"
            },
            {
              "type": "null"
            }
          ]
        },
        "table": {
          "description": "The table number to use for the route. In some scenarios, it may be useful to set routes in a separate routing table. It may also be used to refer to routing policy rules which also accept a table parameter. Allowed values are positive integers starting from 1. Some values are already in use to refer to specific routing tables: see /etc/iproute2/rt_tables. (NetworkManager: as of v1.10.0)",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "to": {
          "description": "Destination address for the route.",
          "type": [
            "string",
            "null"
          ]
        },
        "type": {
          "description": "The type of route. Valid options are “unicast” (default), “anycast”, “blackhole”, “broadcast”, “local”, “multicast”, “nat”, “prohibit”, “throw”, “unreachable” or “xresolve”.",
          "anyOf": [
            {
              "$ref": "#/definitions/RouteType"
            },
            {
              "type": "null"
            }
          ]
        },
        "via": {
          "description": "Address to the gateway to use for this route.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "RoutingPolicy": {
      "description": "The routing-policy block defines extra routing policy for a network, where traffic may be handled specially based on the source IP, firewall marking, etc.\n\nFor from, to, both IPv4 and IPv6 addresses are recognized, and must be in the form addr/prefixlen or addr.",
      "type": "object",
      "required": [
        "table"
      ],
      "properties": {
        "from": {
          "description": "Set a source IP address to match traffic for this policy rule.",
          "type": [
            "string",
            "null"
          ]
        },
        "mark": {
          "description": "Have this routing policy rule match on traffic that has been marked by the iptables firewall with this value. Allowed values are positive integers starting from 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "priority": {
          "description": "Specify a priority for the routing policy rule, to influence the order in which routing rules are processed. A higher number means lower priority: rules are processed in order by increasing priority number.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "table": {
          "description": "The table number to match for the route. In some scenarios, it may be useful to set routes in a separate routing table. It may also be used to refer to routes which also accept a table parameter. Allowed values are positive integers starting from 1. Some values are already in use to refer to specific routing tables: see /etc/iproute2/rt_tables.",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "to": {
          "description": "Match on traffic going to the specified destination.",
          "type": [
            "string",
            "null"
          ]
        },
        "type-of-service": {
          "description": "Match this policy rule based on the type of service number applied to the traffic.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "SslConfig": {
      "description": "Valid for global openvswitch settings. Options for configuring SSL server endpoint for the switch.",
      "type": "object",
      "properties": {
        "ca-cert": {
          "description": "Path to a file containing the CA certificate to be used.",
          "type": [
            "string",
            "null"
          ]
        },
        "certificate": {
          "description": "Path to a file containing the server certificate.",
          "type": [
            "string",
            "null"
          ]
        },
        "private-key": {
          "description": "Path to a file containing the private key for the server.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "TransmitHashPolicy": {
      "description": "Specifies the transmit hash policy for the selection of slaves. This is only useful in balance-xor, 802.3ad and balance-tlb modes. Possible values are layer2, layer3+4, layer2+3, encap2+3, and encap3+4.",
      "type": "string",
      "enum": [
        "layer2",
        "layer3+4",
        "layer2+3",
        "encap2+3",
        "encap3+4"
      ]
    },
    "TunnelConfig": {
      "description": "Tunnels allow traffic to pass as if it was between systems on the same local network, although systems may be far from each other but reachable via the Internet. They may be used to support IPv6 traffic on a network where the ISP does not provide the service, or to extend and “connect” separate local networks. Please see <https://en.wikipedia.org/wiki/Tunneling_protocol> for more general information about tunnels.",
      "type": "object",
      "required": [
        "peers"
      ],
      "properties": {
        "accept-ra": {
          "description": "Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "activation-mode": {
          "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
          "anyOf": [
            {
              "$ref": "#/definitions/lowercase"
            },
            {
              "type": "null"
            }
          ]
        },
        "addresses": {
          "description": "Add static addresses to the interface in addition to the ones received through DHCP or RA. Each sequence entry is in CIDR notation, i. e. of the form addr/prefixlen. addr is an IPv4 or IPv6 address as recognized by inet_pton(3) and prefixlen the number of bits of the subnet.\n\nFor virtual devices (bridges, bonds, vlan) if there is no address configured and DHCP is disabled, the interface may still be brought online, but will not be addressable from the network.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AddressMapping"
          }
        },
        "critical": {
          "description": "Designate the connection as “critical to the system”, meaning that special care will be taken by to not release the assigned IP when the daemon is restarted. (not recognized by NetworkManager)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp-identifier": {
          "description": "(networkd backend only) Sets the source of DHCPv4 client identifier. If mac is specified, the MAC address of the link is used. If this option is omitted, or if duid is specified, networkd will generate an RFC4361-compliant client identifier for the interface by combining the link’s IAID and DUID.",
          "type": [
            "string",
            "null"
          ]
        },
        "dhcp4": {
          "description": "Enable DHCP for IPv4. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp4-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "dhcp6": {
          "description": "Enable DHCP for IPv6. Off by default. This covers both stateless DHCP - where the DHCP server supplies information like DNS nameservers but not the IP address - and stateful DHCP, where the server provides both the address and the other information.\n\nIf you are in an IPv6-only environment with completely stateless autoconfiguration (SLAAC with RDNSS), this option can be set to cause the interface to be brought up. (Setting accept-ra alone is not sufficient.) Autoconfiguration will still honour the contents of the router advertisement and only use DHCP if requested in the RA.\n\nNote that rdnssd(8) is required to use RDNSS with networkd. No extra software is required for NetworkManager.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp6-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "gateway4": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway6": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "ignore-carrier": {
          "description": "(networkd backend only) Allow the specified interface to be configured even if it has no carrier.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ipv6-address-generation": {
          "description": "Configure method for creating the address for use with RFC4862 IPv6 Stateless Address Autoconfiguration (only supported with NetworkManager backend). Possible values are eui64 or stable-privacy.",
          "anyOf": [
            {
              "$ref": "#/definitions/Ipv6AddressGeneration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ipv6-address-token": {
          "description": "Define an IPv6 address token for creating a static interface identifier for IPv6 Stateless Address Autoconfiguration. This is mutually exclusive with ipv6-address-generation.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6-mtu": {
          "description": "Set the IPv6 MTU (only supported with networkd backend). Note that needing to set this is an unusual requirement.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ipv6-privacy": {
          "description": "Enable IPv6 Privacy Extensions (RFC 4941) for the specified interface, and prefer temporary addresses. Defaults to false - no privacy extensions. There is currently no way to have a private address but prefer the public address.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "key": {
          "description": "Define keys to use for the tunnel. The key can be a number or a dotted quad (an IPv4 address). For wireguard it can be a base64-encoded private key or (as of networkd v242+) an absolute path to a file, containing the private key (since 0.100). It is used for identification of IP transforms. This is only required for vti and vti6 when using the networkd backend, and for gre or ip6gre tunnels when using the NetworkManager backend.\n\nThis field may be used as a scalar (meaning that a single key is specified and to be used for input, output and private key), or as a mapping, where you can further specify input/output/private.",
          "anyOf": [
            {
              "$ref": "#/definitions/TunnelKey"
            },
            {
              "type": "null"
            }
          ]
        },
        "link-local": {
          "description": "Configure the link-local addresses to bring up. Valid options are ‘ipv4’ and ‘ipv6’, which respectively allow enabling IPv4 and IPv6 link local addressing. If this field is not defined, the default is to enable only IPv6 link-local addresses. If the field is defined but configured as an empty set, IPv6 link-local addresses are disabled as well as IPv4 link- local addresses.\n\nThis feature enables or disables link-local addresses for a protocol, but the actual implementation differs per backend. On networkd, this directly changes the behavior and may add an extra address on an interface. When using the NetworkManager backend, enabling link-local has no effect if the interface also has DHCP enabled.\n\nExample to enable only IPv4 link-local: `link-local: [ ipv4 ]` Example to enable all link-local addresses: `link-local: [ ipv4, ipv6 ]` Example to disable all link-local addresses: `link-local: [ ]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "local": {
          "description": "Defines the address of the local endpoint of the tunnel.",
          "type": [
            "string",
            "null"
          ]
        },
        "macaddress": {
          "description": "Set the device’s MAC address. The MAC address must be in the form “XX:XX:XX:XX:XX:XX”.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MAC addresses.",
          "type": [
            "string",
            "null"
          ]
        },
        "mark": {
          "description": "Firewall mark for outgoing WireGuard packets from this interface, optional.",
          "type": [
            "string",
            "null"
          ]
        },
        "mode": {
          "description": "Defines the tunnel mode. Valid options are sit, gre, ip6gre, ipip, ipip6, ip6ip6, vti, vti6 and wireguard. Additionally, the networkd backend also supports gretap and ip6gretap modes. In addition, the NetworkManager backend supports isatap tunnels.",
          "anyOf": [
            {
              "$ref": "#/definitions/TunnelMode"
            },
            {
              "type": "null"
            }
          ]
        },
        "mtu": {
          "description": "Set the Maximum Transmission Unit for the interface. The default is 1500. Valid values depend on your network interface.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MTU.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "nameservers": {
          "description": "Set DNS servers and search domains, for manual address configuration.",
          "anyOf": [
            {
              "$ref": "#/definitions/NameserverConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "An optional device is not required for booting. Normally, networkd will wait some time for device to become configured before proceeding with booting. However, if a device is marked as optional, networkd will not wait for it. This is only supported by networkd, and the default is false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optional-addresses": {
          "description": "Specify types of addresses that are not required for a device to be considered online. This changes the behavior of backends at boot time to avoid waiting for addresses that are marked optional, and thus consider the interface as “usable” sooner. This does not disable these addresses, which will be brought up anyway.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "peers": {
          "description": "A list of peers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WireGuardPeer"
          }
        },
        "port": {
          "description": "UDP port to listen at or auto. Optional, defaults to auto.",
          "type": [
            "string",
            "null"
          ]
        },
        "remote": {
          "description": "Defines the address of the remote endpoint of the tunnel.",
          "type": [
            "string",
            "null"
          ]
        },
        "renderer": {
          "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "routes": {
          "description": "Configure static routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingConfig"
          }
        },
        "routing-policy": {
          "description": "Configure policy routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingPolicy"
          }
        },
        "ttl": {
          "description": "Defines the TTL of the tunnel.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "TunnelKey": {
      "description": "Define keys to use for the tunnel. The key can be a number or a dotted quad (an IPv4 address). For wireguard it can be a base64-encoded private key or (as of networkd v242+) an absolute path to a file, containing the private key (since 0.100). It is used for identification of IP transforms. This is only required for vti and vti6 when using the networkd backend, and for gre or ip6gre tunnels when using the NetworkManager backend.\n\nThis field may be used as a scalar (meaning that a single key is specified and to be used for input, output and private key), or as a mapping, where you can further specify input/output/private.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Simple"
          ],
          "properties": {
            "Simple": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Complex"
          ],
          "properties": {
            "Complex": {
              "type": "object",
              "properties": {
                "input": {
                  "description": "The input key for the tunnel",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "output": {
                  "description": "The output key for the tunnel",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "private": {
                  "description": "A base64-encoded private key required for WireGuard tunnels. When the systemd-networkd backend (v242+) is used, this can also be an absolute path to a file containing the private key.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TunnelMode": {
      "description": "Defines the tunnel mode. Valid options are sit, gre, ip6gre, ipip, ipip6, ip6ip6, vti, vti6 and wireguard. Additionally, the networkd backend also supports gretap and ip6gretap modes. In addition, the NetworkManager backend supports isatap tunnels.",
      "type": "string",
      "enum": [
        "sit",
        "gre",
        "ip6gre",
        "ipip",
        "ipip6",
        "ip6ip6",
        "vti",
        "vti6",
        "wireguard",
        "gretap",
        "ip6gretap",
        "isatap"
      ]
    },
    "VlanConfig": {
      "type": "object",
      "properties": {
        "accept-ra": {
          "description": "Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "activation-mode": {
          "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
          "anyOf": [
            {
              "$ref": "#/definitions/lowercase"
            },
            {
              "type": "null"
            }
          ]
        },
        "addresses": {
          "description": "Add static addresses to the interface in addition to the ones received through DHCP or RA. Each sequence entry is in CIDR notation, i. e. of the form addr/prefixlen. addr is an IPv4 or IPv6 address as recognized by inet_pton(3) and prefixlen the number of bits of the subnet.\n\nFor virtual devices (bridges, bonds, vlan) if there is no address configured and DHCP is disabled, the interface may still be brought online, but will not be addressable from the network.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AddressMapping"
          }
        },
        "critical": {
          "description": "Designate the connection as “critical to the system”, meaning that special care will be taken by to not release the assigned IP when the daemon is restarted. (not recognized by NetworkManager)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp-identifier": {
          "description": "(networkd backend only) Sets the source of DHCPv4 client identifier. If mac is specified, the MAC address of the link is used. If this option is omitted, or if duid is specified, networkd will generate an RFC4361-compliant client identifier for the interface by combining the link’s IAID and DUID.",
          "type": [
            "string",
            "null"
          ]
        },
        "dhcp4": {
          "description": "Enable DHCP for IPv4. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp4-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "dhcp6": {
          "description": "Enable DHCP for IPv6. Off by default. This covers both stateless DHCP - where the DHCP server supplies information like DNS nameservers but not the IP address - and stateful DHCP, where the server provides both the address and the other information.\n\nIf you are in an IPv6-only environment with completely stateless autoconfiguration (SLAAC with RDNSS), this option can be set to cause the interface to be brought up. (Setting accept-ra alone is not sufficient.) Autoconfiguration will still honour the contents of the router advertisement and only use DHCP if requested in the RA.\n\nNote that rdnssd(8) is required to use RDNSS with networkd. No extra software is required for NetworkManager.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp6-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "gateway4": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway6": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "id": {
          "description": "VLAN ID, a number between 0 and 4094.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ignore-carrier": {
          "description": "(networkd backend only) Allow the specified interface to be configured even if it has no carrier.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ipv6-address-generation": {
          "description": "Configure method for creating the address for use with RFC4862 IPv6 Stateless Address Autoconfiguration (only supported with NetworkManager backend). Possible values are eui64 or stable-privacy.",
          "anyOf": [
            {
              "$ref": "#/definitions/Ipv6AddressGeneration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ipv6-address-token": {
          "description": "Define an IPv6 address token for creating a static interface identifier for IPv6 Stateless Address Autoconfiguration. This is mutually exclusive with ipv6-address-generation.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6-mtu": {
          "description": "Set the IPv6 MTU (only supported with networkd backend). Note that needing to set this is an unusual requirement.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ipv6-privacy": {
          "description": "Enable IPv6 Privacy Extensions (RFC 4941) for the specified interface, and prefer temporary addresses. Defaults to false - no privacy extensions. There is currently no way to have a private address but prefer the public address.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "link": {
          "description": "netplan ID of the underlying device definition on which this VLAN gets created.",
          "type": [
            "string",
            "null"
          ]
        },
        "link-local": {
          "description": "Configure the link-local addresses to bring up. Valid options are ‘ipv4’ and ‘ipv6’, which respectively allow enabling IPv4 and IPv6 link local addressing. If this field is not defined, the default is to enable only IPv6 link-local addresses. If the field is defined but configured as an empty set, IPv6 link-local addresses are disabled as well as IPv4 link- local addresses.\n\nThis feature enables or disables link-local addresses for a protocol, but the actual implementation differs per backend. On networkd, this directly changes the behavior and may add an extra address on an interface. When using the NetworkManager backend, enabling link-local has no effect if the interface also has DHCP enabled.\n\nExample to enable only IPv4 link-local: `link-local: [ ipv4 ]` Example to enable all link-local addresses: `link-local: [ ipv4, ipv6 ]` Example to disable all link-local addresses: `link-local: [ ]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "macaddress": {
          "description": "Set the device’s MAC address. The MAC address must be in the form “XX:XX:XX:XX:XX:XX”.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MAC addresses.",
          "type": [
            "string",
            "null"
          ]
        },
        "mtu": {
          "description": "Set the Maximum Transmission Unit for the interface. The default is 1500. Valid values depend on your network interface.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MTU.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "nameservers": {
          "description": "Set DNS servers and search domains, for manual address configuration.",
          "anyOf": [
            {
              "$ref": "#/definitions/NameserverConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "An optional device is not required for booting. Normally, networkd will wait some time for device to become configured before proceeding with booting. However, if a device is marked as optional, networkd will not wait for it. This is only supported by networkd, and the default is false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optional-addresses": {
          "description": "Specify types of addresses that are not required for a device to be considered online. This changes the behavior of backends at boot time to avoid waiting for addresses that are marked optional, and thus consider the interface as “usable” sooner. This does not disable these addresses, which will be brought up anyway.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "renderer": {
          "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "routes": {
          "description": "Configure static routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingConfig"
          }
        },
        "routing-policy": {
          "description": "Configure policy routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingPolicy"
          }
        }
      }
    },
    "VrfsConfig": {
      "description": "Purpose: Use the vrfs key to create Virtual Routing and Forwarding (VRF) interfaces.\n\nStructure: The key consists of a mapping of VRF interface names. The interface used in the link option (enp5s0 in the example below) must also be defined in the Netplan configuration. The general configuration structure for VRFs is shown below.",
      "type": "object",
      "required": [
        "interfaces",
        "table"
      ],
      "properties": {
        "accept-ra": {
          "description": "Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "activation-mode": {
          "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
          "anyOf": [
            {
              "$ref": "#/definitions/lowercase"
            },
            {
              "type": "null"
            }
          ]
        },
        "addresses": {
          "description": "Add static addresses to the interface in addition to the ones received through DHCP or RA. Each sequence entry is in CIDR notation, i. e. of the form addr/prefixlen. addr is an IPv4 or IPv6 address as recognized by inet_pton(3) and prefixlen the number of bits of the subnet.\n\nFor virtual devices (bridges, bonds, vlan) if there is no address configured and DHCP is disabled, the interface may still be brought online, but will not be addressable from the network.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AddressMapping"
          }
        },
        "critical": {
          "description": "Designate the connection as “critical to the system”, meaning that special care will be taken by to not release the assigned IP when the daemon is restarted. (not recognized by NetworkManager)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp-identifier": {
          "description": "(networkd backend only) Sets the source of DHCPv4 client identifier. If mac is specified, the MAC address of the link is used. If this option is omitted, or if duid is specified, networkd will generate an RFC4361-compliant client identifier for the interface by combining the link’s IAID and DUID.",
          "type": [
            "string",
            "null"
          ]
        },
        "dhcp4": {
          "description": "Enable DHCP for IPv4. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp4-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "dhcp6": {
          "description": "Enable DHCP for IPv6. Off by default. This covers both stateless DHCP - where the DHCP server supplies information like DNS nameservers but not the IP address - and stateful DHCP, where the server provides both the address and the other information.\n\nIf you are in an IPv6-only environment with completely stateless autoconfiguration (SLAAC with RDNSS), this option can be set to cause the interface to be brought up. (Setting accept-ra alone is not sufficient.) Autoconfiguration will still honour the contents of the router advertisement and only use DHCP if requested in the RA.\n\nNote that rdnssd(8) is required to use RDNSS with networkd. No extra software is required for NetworkManager.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp6-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "gateway4": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway6": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "ignore-carrier": {
          "description": "(networkd backend only) Allow the specified interface to be configured even if it has no carrier.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "interfaces": {
          "description": "All devices matching this ID list will be added to the VRF. This may be an empty list, in which case the VRF will be brought online with no member interfaces.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ipv6-address-generation": {
          "description": "Configure method for creating the address for use with RFC4862 IPv6 Stateless Address Autoconfiguration (only supported with NetworkManager backend). Possible values are eui64 or stable-privacy.",
          "anyOf": [
            {
              "$ref": "#/definitions/Ipv6AddressGeneration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ipv6-address-token": {
          "description": "Define an IPv6 address token for creating a static interface identifier for IPv6 Stateless Address Autoconfiguration. This is mutually exclusive with ipv6-address-generation.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6-mtu": {
          "description": "Set the IPv6 MTU (only supported with networkd backend). Note that needing to set this is an unusual requirement.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ipv6-privacy": {
          "description": "Enable IPv6 Privacy Extensions (RFC 4941) for the specified interface, and prefer temporary addresses. Defaults to false - no privacy extensions. There is currently no way to have a private address but prefer the public address.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "link-local": {
          "description": "Configure the link-local addresses to bring up. Valid options are ‘ipv4’ and ‘ipv6’, which respectively allow enabling IPv4 and IPv6 link local addressing. If this field is not defined, the default is to enable only IPv6 link-local addresses. If the field is defined but configured as an empty set, IPv6 link-local addresses are disabled as well as IPv4 link- local addresses.\n\nThis feature enables or disables link-local addresses for a protocol, but the actual implementation differs per backend. On networkd, this directly changes the behavior and may add an extra address on an interface. When using the NetworkManager backend, enabling link-local has no effect if the interface also has DHCP enabled.\n\nExample to enable only IPv4 link-local: `link-local: [ ipv4 ]` Example to enable all link-local addresses: `link-local: [ ipv4, ipv6 ]` Example to disable all link-local addresses: `link-local: [ ]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "macaddress": {
          "description": "Set the device’s MAC address. The MAC address must be in the form “XX:XX:XX:XX:XX:XX”.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MAC addresses.",
          "type": [
            "string",
            "null"
          ]
        },
        "mtu": {
          "description": "Set the Maximum Transmission Unit for the interface. The default is 1500. Valid values depend on your network interface.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MTU.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "nameservers": {
          "description": "Set DNS servers and search domains, for manual address configuration.",
          "anyOf": [
            {
              "$ref": "#/definitions/NameserverConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "An optional device is not required for booting. Normally, networkd will wait some time for device to become configured before proceeding with booting. However, if a device is marked as optional, networkd will not wait for it. This is only supported by networkd, and the default is false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optional-addresses": {
          "description": "Specify types of addresses that are not required for a device to be considered online. This changes the behavior of backends at boot time to avoid waiting for addresses that are marked optional, and thus consider the interface as “usable” sooner. This does not disable these addresses, which will be brought up anyway.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "renderer": {
          "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "routes": {
          "description": "Configure static routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingConfig"
          }
        },
        "routing-policy": {
          "description": "Configure policy routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingPolicy"
          }
        },
        "table": {
          "description": "The numeric routing table identifier. This setting is compulsory.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WakeOnWLan": {
      "description": "This enables WakeOnWLan on supported devices. Not all drivers support all options. May be any combination of any, disconnect, magic_pkt, gtk_rekey_failure, eap_identity_req, four_way_handshake, rfkill_release or tcp (NetworkManager only). Or the exclusive default flag (the default).",
      "type": "string",
      "enum": [
        "any",
        "disconnect",
        "magic_pkt",
        "gtk_rekey_failure",
        "eap_identity_req",
        "four_way_handshake",
        "rfkill_release",
        "tcp",
        "default"
      ]
    },
    "WifiConfig": {
      "description": "Common properties for physical device types",
      "type": "object",
      "properties": {
        "accept-ra": {
          "description": "Accept Router Advertisement that would have the kernel configure IPv6 by itself. When enabled, accept Router Advertisements. When disabled, do not respond to Router Advertisements. If unset use the host kernel default setting.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "access-points": {
          "description": "This provides pre-configured connections to NetworkManager. Note that users can of course select other access points/SSIDs. The keys of the mapping are the SSIDs, and the values are mappings with the following supported properties:",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "$ref": "#/definitions/AccessPointConfig"
          }
        },
        "activation-mode": {
          "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
          "anyOf": [
            {
              "$ref": "#/definitions/lowercase"
            },
            {
              "type": "null"
            }
          ]
        },
        "addresses": {
          "description": "Add static addresses to the interface in addition to the ones received through DHCP or RA. Each sequence entry is in CIDR notation, i. e. of the form addr/prefixlen. addr is an IPv4 or IPv6 address as recognized by inet_pton(3) and prefixlen the number of bits of the subnet.\n\nFor virtual devices (bridges, bonds, vlan) if there is no address configured and DHCP is disabled, the interface may still be brought online, but will not be addressable from the network.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/AddressMapping"
          }
        },
        "critical": {
          "description": "Designate the connection as “critical to the system”, meaning that special care will be taken by to not release the assigned IP when the daemon is restarted. (not recognized by NetworkManager)",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp-identifier": {
          "description": "(networkd backend only) Sets the source of DHCPv4 client identifier. If mac is specified, the MAC address of the link is used. If this option is omitted, or if duid is specified, networkd will generate an RFC4361-compliant client identifier for the interface by combining the link’s IAID and DUID.",
          "type": [
            "string",
            "null"
          ]
        },
        "dhcp4": {
          "description": "Enable DHCP for IPv4. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp4-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "dhcp6": {
          "description": "Enable DHCP for IPv6. Off by default. This covers both stateless DHCP - where the DHCP server supplies information like DNS nameservers but not the IP address - and stateful DHCP, where the server provides both the address and the other information.\n\nIf you are in an IPv6-only environment with completely stateless autoconfiguration (SLAAC with RDNSS), this option can be set to cause the interface to be brought up. (Setting accept-ra alone is not sufficient.) Autoconfiguration will still honour the contents of the router advertisement and only use DHCP if requested in the RA.\n\nNote that rdnssd(8) is required to use RDNSS with networkd. No extra software is required for NetworkManager.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dhcp6-overrides": {
          "description": "(networkd backend only) Overrides default DHCP behavior",
          "anyOf": [
            {
              "$ref": "#/definitions/DhcpOverrides"
            },
            {
              "type": "null"
            }
          ]
        },
        "emit-lldp": {
          "description": "(networkd backend only) Whether to emit LLDP packets. Off by default.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "gateway4": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "gateway6": {
          "description": "Deprecated, see Default routes. Set default gateway for IPv4/6, for manual address configuration. This requires setting addresses too. Gateway IPs must be in a form recognized by inet_pton(3). There should only be a single gateway per IP address family set in your global config, to make it unambiguous. If you need multiple default routes, please define them via routing-policy.",
          "type": [
            "string",
            "null"
          ]
        },
        "generic-receive-offload": {
          "description": "(networkd backend only) If set to true, the Generic Receive Offload (GRO) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "generic-segmentation-offload": {
          "description": "(networkd backend only) If set to true, the Generic Segmentation Offload (GSO) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ignore-carrier": {
          "description": "(networkd backend only) Allow the specified interface to be configured even if it has no carrier.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "ipv6-address-generation": {
          "description": "Configure method for creating the address for use with RFC4862 IPv6 Stateless Address Autoconfiguration (only supported with NetworkManager backend). Possible values are eui64 or stable-privacy.",
          "anyOf": [
            {
              "$ref": "#/definitions/Ipv6AddressGeneration"
            },
            {
              "type": "null"
            }
          ]
        },
        "ipv6-address-token": {
          "description": "Define an IPv6 address token for creating a static interface identifier for IPv6 Stateless Address Autoconfiguration. This is mutually exclusive with ipv6-address-generation.",
          "type": [
            "string",
            "null"
          ]
        },
        "ipv6-mtu": {
          "description": "Set the IPv6 MTU (only supported with networkd backend). Note that needing to set this is an unusual requirement.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "ipv6-privacy": {
          "description": "Enable IPv6 Privacy Extensions (RFC 4941) for the specified interface, and prefer temporary addresses. Defaults to false - no privacy extensions. There is currently no way to have a private address but prefer the public address.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "large-receive-offload": {
          "description": "(networkd backend only) If set to true, the Generic Receive Offload (GRO) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "link-local": {
          "description": "Configure the link-local addresses to bring up. Valid options are ‘ipv4’ and ‘ipv6’, which respectively allow enabling IPv4 and IPv6 link local addressing. If this field is not defined, the default is to enable only IPv6 link-local addresses. If the field is defined but configured as an empty set, IPv6 link-local addresses are disabled as well as IPv4 link- local addresses.\n\nThis feature enables or disables link-local addresses for a protocol, but the actual implementation differs per backend. On networkd, this directly changes the behavior and may add an extra address on an interface. When using the NetworkManager backend, enabling link-local has no effect if the interface also has DHCP enabled.\n\nExample to enable only IPv4 link-local: `link-local: [ ipv4 ]` Example to enable all link-local addresses: `link-local: [ ipv4, ipv6 ]` Example to disable all link-local addresses: `link-local: [ ]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "macaddress": {
          "description": "Set the device’s MAC address. The MAC address must be in the form “XX:XX:XX:XX:XX:XX”.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MAC addresses.",
          "type": [
            "string",
            "null"
          ]
        },
        "match": {
          "description": "This selects a subset of available physical devices by various hardware properties. The following configuration will then apply to all matching devices, as soon as they appear. All specified properties must match.",
          "anyOf": [
            {
              "$ref": "#/definitions/MatchConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "mtu": {
          "description": "Set the Maximum Transmission Unit for the interface. The default is 1500. Valid values depend on your network interface.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting MTU.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "nameservers": {
          "description": "Set DNS servers and search domains, for manual address configuration.",
          "anyOf": [
            {
              "$ref": "#/definitions/NameserverConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "openvswitch": {
          "description": "This provides additional configuration for the network device for openvswitch. If openvswitch is not available on the system, netplan treats the presence of openvswitch configuration as an error.\n\nAny supported network device that is declared with the openvswitch mapping (or any bond/bridge that includes an interface with an openvswitch configuration) will be created in openvswitch instead of the defined renderer. In the case of a vlan definition declared the same way, netplan will create a fake VLAN bridge in openvswitch with the requested vlan properties.",
          "anyOf": [
            {
              "$ref": "#/definitions/OpenVSwitchConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "optional": {
          "description": "An optional device is not required for booting. Normally, networkd will wait some time for device to become configured before proceeding with booting. However, if a device is marked as optional, networkd will not wait for it. This is only supported by networkd, and the default is false.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "optional-addresses": {
          "description": "Specify types of addresses that are not required for a device to be considered online. This changes the behavior of backends at boot time to avoid waiting for addresses that are marked optional, and thus consider the interface as “usable” sooner. This does not disable these addresses, which will be brought up anyway.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "receive-checksum-offload": {
          "description": "(networkd backend only) If set to true, the hardware offload for checksumming of ingress network packets is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "renderer": {
          "description": "Use the given networking backend for this definition. Currently supported are networkd and NetworkManager. This property can be specified globally in network:, for a device type (in e. g. ethernets:) or for a particular device definition. Default is networkd.\n\n(Since 0.99) The renderer property has one additional acceptable value for vlan objects (i. e. defined in vlans:): sriov. If a vlan is defined with the sriov renderer for an SR-IOV Virtual Function interface, this causes netplan to set up a hardware VLAN filter for it. There can be only one defined per VF.",
          "anyOf": [
            {
              "$ref": "#/definitions/Renderer"
            },
            {
              "type": "null"
            }
          ]
        },
        "routes": {
          "description": "Configure static routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingConfig"
          }
        },
        "routing-policy": {
          "description": "Configure policy routing for the device",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/RoutingPolicy"
          }
        },
        "set-name": {
          "description": "When matching on unique properties such as path or MAC, or with additional assumptions such as “there will only ever be one wifi device”, match rules can be written so that they only match one device. Then this property can be used to give that device a more specific/desirable/nicer name than the default from udev’s ifnames. Any additional device that satisfies the match rules will then fail to get renamed and keep the original kernel name (and dmesg will show an error).",
          "type": [
            "string",
            "null"
          ]
        },
        "tcp-segmentation-offload": {
          "description": "(networkd backend only) If set to true, the TCP Segmentation Offload (TSO) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "tcp6-segmentation-offload": {
          "description": "(networkd backend only) If set to true, the TCP6 Segmentation Offload (tx-tcp6-segmentation) is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "transmit-checksum-offload": {
          "description": "(networkd backend only) If set to true, the hardware offload for checksumming of egress network packets is enabled. When unset, the kernel’s default will be used.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "wakeonlan": {
          "description": "Enable wake on LAN. Off by default.\n\nNote: This will not work reliably for devices matched by name only and rendered by networkd, due to interactions with device renaming in udev. Match devices by MAC when setting wake on LAN.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "wakeonwlan": {
          "description": "This enables WakeOnWLan on supported devices. Not all drivers support all options. May be any combination of any, disconnect, magic_pkt, gtk_rekey_failure, eap_identity_req, four_way_handshake, rfkill_release or tcp (NetworkManager only). Or the exclusive default flag (the default).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/WakeOnWLan"
          }
        }
      }
    },
    "WireGuardPeer": {
      "description": "A list of peers",
      "type": "object",
      "properties": {
        "allowed-ips": {
          "description": "A list of IP (v4 or v6) addresses with CIDR masks from which this peer is allowed to send incoming traffic and to which outgoing traffic for this peer is directed. The catch-all 0.0.0.0/0 may be specified for matching all IPv4 addresses, and ::/0 may be specified for matching all IPv6 addresses.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "endpoint": {
          "description": "Remote endpoint IPv4/IPv6 address or a hostname, followed by a colon and a port number.",
          "type": [
            "string",
            "null"
          ]
        },
        "keepalive": {
          "description": "An interval in seconds, between 1 and 65535 inclusive, of how often to send an authenticated empty packet to the peer for the purpose of keeping a stateful firewall or NAT mapping valid persistently. Optional.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "keys": {
          "description": "Define keys to use for the WireGuard peers.",
          "anyOf": [
            {
              "$ref": "#/definitions/WireGuardPeerKey"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "WireGuardPeerKey": {
      "description": "Define keys to use for the WireGuard peers.\n\nThis field can be used as a mapping, where you can further specify the public and shared keys.",
      "type": "object",
      "properties": {
        "public": {
          "description": "A base64-encoded public key, required for WireGuard peers.",
          "type": [
            "string",
            "null"
          ]
        },
        "shared": {
          "description": "A base64-encoded preshared key. Optional for WireGuard peers. When the systemd-networkd backend (v242+) is used, this can also be an absolute path to a file containing the preshared key.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "WirelessBand": {
      "description": "Possible bands are 5GHz (for 5GHz 802.11a) and 2.4GHz (for 2.4GHz 802.11), do not restrict the 802.11 frequency band of the network if unset (the default).",
      "oneOf": [
        {
          "description": "2.4Ghz",
          "type": "string",
          "enum": [
            "2.4GHz"
          ]
        },
        {
          "description": "5Ghz",
          "type": "string",
          "enum": [
            "5GHz"
          ]
        }
      ]
    },
    "lowercase": {
      "description": "Allows specifying the management policy of the selected interface. By default, netplan brings up any configured interface if possible. Using the activation-mode setting users can override that behavior by either specifying manual, to hand over control over the interface state to the administrator or (for networkd backend only) off to force the link in a down state at all times. Any interface with activation-mode defined is implicitly considered optional. Supported officially as of networkd v248+.",
      "type": "string",
      "enum": [
        "Manual",
        "Off"
      ]
    }
  }
}
